// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mGHS
Rcpp::List mGHS(const int& B, const int& bn, const Eigen::VectorXd& n, const Rcpp::List& S, const int& p, const Eigen::VectorXd hyp_ta, const int& chain, const int& ping);
RcppExport SEXP _mGHS_mGHS(SEXP BSEXP, SEXP bnSEXP, SEXP nSEXP, SEXP SSEXP, SEXP pSEXP, SEXP hyp_taSEXP, SEXP chainSEXP, SEXP pingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const int& >::type bn(bnSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type hyp_ta(hyp_taSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const int& >::type ping(pingSEXP);
    rcpp_result_gen = Rcpp::wrap(mGHS(B, bn, n, S, p, hyp_ta, chain, ping));
    return rcpp_result_gen;
END_RCPP
}
// mGHS_new
Rcpp::List mGHS_new(const int& B, const int& bn, const Eigen::VectorXd& n, const Rcpp::List& S, const int& p, const Eigen::VectorXd hyp_ta, const int& chain, const int& ping);
RcppExport SEXP _mGHS_mGHS_new(SEXP BSEXP, SEXP bnSEXP, SEXP nSEXP, SEXP SSEXP, SEXP pSEXP, SEXP hyp_taSEXP, SEXP chainSEXP, SEXP pingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const int& >::type bn(bnSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type hyp_ta(hyp_taSEXP);
    Rcpp::traits::input_parameter< const int& >::type chain(chainSEXP);
    Rcpp::traits::input_parameter< const int& >::type ping(pingSEXP);
    rcpp_result_gen = Rcpp::wrap(mGHS_new(B, bn, n, S, p, hyp_ta, chain, ping));
    return rcpp_result_gen;
END_RCPP
}
// pbdv
double pbdv(const double& va, const double& x);
RcppExport SEXP _mGHS_pbdv(SEXP vaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type va(vaSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pbdv(va, x));
    return rcpp_result_gen;
END_RCPP
}
// rIW
Eigen::MatrixXd rIW(const double& df, const Eigen::MatrixXd& S, const int& K);
RcppExport SEXP _mGHS_rIW(SEXP dfSEXP, SEXP SSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(rIW(df, S, K));
    return rcpp_result_gen;
END_RCPP
}
// rg3p_c1
double rg3p_c1(const double& a, const double& b);
RcppExport SEXP _mGHS_rg3p_c1(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rg3p_c1(a, b));
    return rcpp_result_gen;
END_RCPP
}
// rg3p_approx
double rg3p_approx(const double& a, const double& b, const int& c);
RcppExport SEXP _mGHS_rg3p_approx(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rg3p_approx(a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// rg3p
double rg3p(const double& a, const double& b, const int& c);
RcppExport SEXP _mGHS_rg3p(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const int& >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rg3p(a, b, c));
    return rcpp_result_gen;
END_RCPP
}
// pgamma3p1
double pgamma3p1(const double& x, const double& a, const double& b);
RcppExport SEXP _mGHS_pgamma3p1(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(pgamma3p1(x, a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mGHS_mGHS", (DL_FUNC) &_mGHS_mGHS, 8},
    {"_mGHS_mGHS_new", (DL_FUNC) &_mGHS_mGHS_new, 8},
    {"_mGHS_pbdv", (DL_FUNC) &_mGHS_pbdv, 2},
    {"_mGHS_rIW", (DL_FUNC) &_mGHS_rIW, 3},
    {"_mGHS_rg3p_c1", (DL_FUNC) &_mGHS_rg3p_c1, 2},
    {"_mGHS_rg3p_approx", (DL_FUNC) &_mGHS_rg3p_approx, 3},
    {"_mGHS_rg3p", (DL_FUNC) &_mGHS_rg3p, 3},
    {"_mGHS_pgamma3p1", (DL_FUNC) &_mGHS_pgamma3p1, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_mGHS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
